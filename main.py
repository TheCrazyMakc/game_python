import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
from game_classes import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞—à–∏ –∏–≥—Ä–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
players = {}
battles = {}

# –û—Ä—É–∂–∏–µ –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–¥–∏–Ω —Ä–∞–∑)
sword = Weapon("–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á", 15)
bow = Weapon("–î–ª–∏–Ω–Ω—ã–π –ª—É–∫", 10)
enemies = {
    "goblin": Enemy("–ì–æ–±–ª–∏–Ω", 60, 60, Weapon("–†–∂–∞–≤—ã–π –∫–∏–Ω–∂–∞–ª", 8)),
    "orc": Enemy("–û—Ä–∫", 120, 120, Weapon("–¢–æ–ø–æ—Ä", 12), 20)
}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    players[user_id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
    
    keyboard = [
        [InlineKeyboardButton("–í–æ–∏–Ω ‚öîÔ∏è", callback_data='warrior')],
        [InlineKeyboardButton("–õ—É—á–Ω–∏–∫ üèπ", callback_data='archer')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RPG Battle Bot!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
async def choose_class(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    choice = query.data
    
    if choice == 'warrior':
        players[user_id] = Warrior(query.from_user.first_name)
        players[user_id].weapon = sword
        text = f"‚öîÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –í–æ–∏–Ω–∞ {query.from_user.first_name}!\nHP: 150/150\n–û—Ä—É–∂–∏–µ: {sword.name} (—É—Ä–æ–Ω: {sword.damage})"
    elif choice == 'archer':
        players[user_id] = Archer(query.from_user.first_name)
        players[user_id].weapon = bow
        text = f"üèπ –í—ã –≤—ã–±—Ä–∞–ª–∏ –õ—É—á–Ω–∏–∫–∞ {query.from_user.first_name}!\nHP: 80/80\n–û—Ä—É–∂–∏–µ: {bow.name} (—É—Ä–æ–Ω: {bow.damage})\n–°—Ç—Ä–µ–ª—ã: 10"
    
    keyboard = [
        [InlineKeyboardButton("–ì–æ–±–ª–∏–Ω üê≤", callback_data='goblin')],
        [InlineKeyboardButton("–û—Ä–∫ üëπ", callback_data='orc')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
async def choose_enemy(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    enemy_choice = query.data
    
    if user_id not in players or players[user_id] is None:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    player = players[user_id]
    enemy = enemies[enemy_choice].__copy__()  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—è
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ–π
    battles[user_id] = {
        'player': player,
        'enemy': enemy,
        'message_id': query.message.message_id  # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    }
    
    await send_battle_status(user_id, context, "–ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å!")

# –û—Ç–ø—Ä–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—è
async def send_battle_status(user_id, context: CallbackContext, action_text=""):
    battle = battles.get(user_id)
    if not battle:
        return
    
    player = battle['player']
    enemy = battle['enemy']
    
    text = (
        f"‚öîÔ∏è {player.name} vs {enemy.name} ‚öîÔ∏è\n\n"
        f"{player.name} {player.get_hearts()} {player.health}/{player.max_health} HP\n"
        f"{enemy.name} {enemy.get_hearts()} {enemy.health}/{enemy.max_health} HP\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = []
    if isinstance(player, Warrior):
        cooldown_text = " (üîÅ)" if player.current_cooldown > 0 else ""
        keyboard.append([InlineKeyboardButton(f"–ú–æ—â–Ω—ã–π —É–¥–∞—Ä üí•{cooldown_text}", callback_data='power_strike')])
    elif isinstance(player, Archer):
        keyboard.append([InlineKeyboardButton(f"–í—ã—Å—Ç—Ä–µ–ª üèπ (–û—Å—Ç–∞–ª–æ—Å—å: {player.arrows})", callback_data='shoot')])
    
    keyboard.extend([
        [InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å ‚öîÔ∏è", callback_data='attack')],
        [InlineKeyboardButton("–õ–µ—á–µ–Ω–∏–µ ‚ù§Ô∏è (+20 HP)", callback_data='heal')]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await context.bot.edit_message_text(
            chat_id=user_id,
            message_id=battle['message_id'],
            text=text,
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error editing message: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–æ—é
async def battle_action(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    action = query.data
    
    if user_id not in battles:
        await query.edit_message_text("–ë–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —Å /start")
        return
    
    battle = battles[user_id]
    player = battle['player']
    enemy = battle['enemy']
    action_text = ""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞
    if action == 'attack':
        player.attack(enemy)
        action_text = f"{player.name} –∞—Ç–∞–∫—É–µ—Ç {enemy.name}!"
    elif action == 'power_strike' and isinstance(player, Warrior):
        player.power_strike(enemy)
        action_text = f"{player.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ú–æ—â–Ω—ã–π —É–¥–∞—Ä!"
    elif action == 'shoot' and isinstance(player, Archer):
        player.shoot(enemy)
        action_text = f"{player.name} —Å—Ç—Ä–µ–ª—è–µ—Ç –≤ {enemy.name}!"
    elif action == 'heal':
        player.heal(20)
        action_text = f"{player.name} –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ!"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ
    if not enemy.is_alive:
        await query.edit_message_text(
            f"üéâ –ü–æ–±–µ–¥–∞! {player.name} –ø–æ–±–µ–¥–∏–ª {enemy.name}!\n\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ {enemy.exp_reward} –æ–ø—ã—Ç–∞ ‚ú®\n\n"
            "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É: /start"
        )
        battles.pop(user_id, None)
        return
    
    # –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    if player.is_alive:
        enemy.attack(player)
        action_text += f"\n{enemy.name} –∞—Ç–∞–∫—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç!"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
    if not player.is_alive:
        await query.edit_message_text(
            f"‚ò†Ô∏è –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! {player.name} –±—ã–ª –ø–æ–±–µ–∂–¥–µ–Ω {enemy.name}!\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start"
        )
        battles.pop(user_id, None)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—è
    await send_battle_status(user_id, context, action_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: CallbackContext) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    
    if update.callback_query:
        await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token("7612154166:AAHYYcUwQK8WTAzV9zgqb2U5qh8jSvcgS9c").build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(choose_class, pattern='^(warrior|archer)$'))
    application.add_handler(CallbackQueryHandler(choose_enemy, pattern='^(goblin|orc)$'))
    application.add_handler(CallbackQueryHandler(battle_action, pattern='^(attack|power_strike|shoot|heal)$'))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()